<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AydinUniversityStudentPortalExplanation" xml:space="preserve">
    <value>Aydın Universitesi Öğrenci portalı Aydın Üniversitesi öğrenclierine not hesaplama, forum ve ekran paylaşımı ile ders çalışma özelliklerini sunan bir uygulamadır. Uygulama ASP.NET MVC ile yapılmış olup Veritabanı olarak MSSQL, Veriye erişim katmanı olarak Entity Framework ORM, Ekran Paylaşımı içinse RDP sınıfı kullanılmıştır.</value>
  </data>
  <data name="AydinUniversityStudentPortalTitle" xml:space="preserve">
    <value>Aydın Üniversitesi Öğrenci Portalı</value>
  </data>
  <data name="CatchCrazeExplanation" xml:space="preserve">
    <value>Unity ve C# kullanılarak geliştirilmiş reflekslere ve zamanlamaya dayalı Android ve iOs oyunu</value>
  </data>
  <data name="FTExplanation" xml:space="preserve">
    <value>Bu websitesi ASP.NET CORE ve JQuery kullanılarak kodlanmıştır.</value>
  </data>
  <data name="FTWebsiteTitle" xml:space="preserve">
    <value>Fethi Tekyaygil Websitesi</value>
  </data>
  <data name="GuessProjectExplanation" xml:space="preserve">
    <value>Tahmin oyunu önceden sistem tarafından belirlenmiş bir sayıyı kullanıcıya tahmin ettirme ve bu tahminler sonucu geri dönütler vererek tahmin doğruluğunu arttırarak tahmmin ettiren bir konsol uygulamasıdır.</value>
  </data>
  <data name="GuessProjectTitle" xml:space="preserve">
    <value>Tahmin Oyunu</value>
  </data>
  <data name="IdeconCashflowProjectExplanation" xml:space="preserve">
    <value>Firmaların Nakit Akışı kontrollerini gerçekleştirmek, isteğe göre simülasyon yapabilecekleri ve ileriki tarihler için tahminleri görebilecekleri bir Nakit Akışı ASP.NET MVC CORE Web API web uygulaması. Veritabanı için MySQL ve Veriye erişim katmanı için Dapper ORM kullanılmıştır.</value>
  </data>
  <data name="IdeconCashflowProjectTitle" xml:space="preserve">
    <value>Nakit Akışı Projesi</value>
  </data>
  <data name="IdeconExpenseProjectExplanation" xml:space="preserve">
    <value>Firma personellerinin masraf işlemlerini daha hızlı yapabilmeleri adına fiş okuma destekli masraf kaydı oluşurabilen, onaya sunabilen ve yönetilebilen bir IDECON uygulaması. Projenin benim geliştirdiğim backend kısmında SignalR, .NET CORE, Dapper teknolojileri kullanılarak katmanlı mimari ile geliştirme yapılmıştır.</value>
  </data>
  <data name="IdeconExpenseProjectTitle" xml:space="preserve">
    <value>Idecon Personel Masraf Projesi</value>
  </data>
  <data name="NQueenExplanation" xml:space="preserve">
    <value>NQueens Problemi uygulaması, Yapay Zeka problemlerinden biri olan NQueens problemini DFS algoritmasıyla çözen ve kullanıcıdan belli bir vezir sayısı alarak bunu gerçekleştiren Winforms uygulamasıdır.</value>
  </data>
  <data name="NQueenTitle" xml:space="preserve">
    <value>NQueen Problemi</value>
  </data>
  <data name="ProjectsSourceCodes" xml:space="preserve">
    <value>Kaynak Kodları Görüntüle</value>
  </data>
  <data name="PythonExpenseProjectExplanation" xml:space="preserve">
    <value>Firmaların personellerinin masraf işlemleri için Python Flask Framework ve Makine Öğrenmesi amacıyla Spacy Kütüphanesi kullanılarak geliştirilen web servis. Uygulama resmi çekilen fişlerin içinden gerekli bilgileri ayıklayıp bu bilgileri veritabanına kaydetmektedir. Resim okumak için Google OCR apisi, bu verilerin öğrenimi için de Spacy NeR teknolojisi kullanılmaktadır. Veritabanı için MySQL, veriye erişim katmanı için de SQLAlchemy kullanılmaktadır.</value>
  </data>
  <data name="PythonExpenseProjectTitle" xml:space="preserve">
    <value>Masraf Projesi</value>
  </data>
  <data name="ShowAS" xml:space="preserve">
    <value>App Store'da Görüntüle</value>
  </data>
  <data name="ShowPS" xml:space="preserve">
    <value>Play Store'da Görüntüle</value>
  </data>
  <data name="SpinNTossExplanation" xml:space="preserve">
    <value>Unity ve C# kullanılarak geliştirilmiş reflekslere ve zamanlamaya dayalı Android ve iOs oyunu</value>
  </data>
  <data name="XOXExplanation" xml:space="preserve">
    <value>Zorluk derecesi ayarlanabilen, 3x3 lük bir düzlemde oynanan klasik X O X oyununun Min-Max algoritması ile Winforms için geliştirildiği uygulama.</value>
  </data>
  <data name="XOXTitle" xml:space="preserve">
    <value>X O X</value>
  </data>
</root>